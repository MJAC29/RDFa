tinymce.PluginManager.add("rdfa", function(a,b) {
	a.addButton("rdfaPrin", {
		type:'listbox',
		text : "RDFa",
		icon : !1,
		values:[{
		        	text:'Entidades',
		        	menu:[{
		        	    	  text:'Ver',
		        	    	  onclick:function(){
		        					mostrar(a);}
		        	      },
		        	      {
		        	    	  text:'Ocultar',
		        	    	  onclick:function(){
		        					esconder(a);}
		        	      },
		        	      {
		        	    	  text:'Eliminar',
		        	    	  onclick:function(){
		        	    		  Borrar(a,0);}
		        	      }]
		        },
		        {
		        	text:'Configuracion',
		    		onclick : function() {
		    			a.windowManager.open({
		    				title : "Configuración",
		    				url : b + "/configuracion.htm",
		    				width : 500,
		    				height : 360
		    			})
		    			window.editorRdfa = a;
		    	        window.urlRdfa = b;
		    		}
				}]
	});
	a.addButton("codHTML", {
		text : "Codigo",
		icon : !1,
		onclick : function() {
			a.windowManager.open({
				title : "Codigo",
				url : b + "/codigo.htm",
				width : 700,
				height : 550
			})
			window.editorRdfa = a;
			window.urlRdfa = b;
		}
	});
	a.addCommand("conf", function() {
		editor=a;
		var xEnt = -11; 
		var yEnt = 11; 
		jQuery.each(jQuery(editor.getDoc()).find('.entidad'), function(index, value) { 
		
		jQuery(this).unbind('click').click(function(e) {
			e.stopPropagation();
			editor.execCommand('ediEntidad',jQuery(this));
		});	
		});
	});
	a.addCommand("ediEntidad", function(punt) {
		var tipoEnt,texto;
		tipoEnt=punt.attr('typeof').split(':')[1];
		texto= punt.find('span[property="schema:name"]').text();
		var arch;
		arch = b + "/schema.htm";
		a.windowManager.open({
			title: "Editar "+tipoEnt,
			url: arch,
			width :500,
			height : 500
			
		})
		window.editorRdfa = a;
		window.urlRdfa = b;
		window.tipoEntRdfa = tipoEnt;
		window.textoRdfa = texto;
		window.anotacionRdfa = anotacion;
		window.puntRdfa = punt;
	});							
	a.on("CambioNodo",function(e){
		a.execCommand('conf');
	})
	a.on("ActContenido",function(e){
		var editor=a;	
		var variab;		
		jQuery.each(jQuery(editor.getDoc()).find('*[typeof]'), function(key,value){
			variab=jQuery(value).attr('typeof');
			variab='r_'+variab.split(':')[1].toLowerCase();
			if(!jQuery(value).hasClass('entidad')){
				jQuery(value).addClass('entidad');
			}
			if(!jQuery(value).hasClass(variab)){
				jQuery(value).addClass(variab);
			}
		});				
		a.execCommand('conf');
	})	

 // Seleccionar schemas 
	jQuery.getJSON(b+'/schema/clasificacion.json', function(data) {		
		a.on("contextmenu",function(event){
			if(a.inline){
		        jQuery(a.getDoc()).find(' .mce-floatpanel.mce-menu').hide();
			}else{
		        jQuery(' .mce-floatpanel.mce-menu').hide();
			}
			arrayMenu=[];
			var tiposDatos=[];
			var nodoPrincipal=jQuery(event.target);
	        var relac=0;	    
	         jQuery.each(data.types,function(o,t){
	        	tiposDatos.push(t.id);
			 })
			 var opciones=[];
	          while(nodoPrincipal.length){
	        	  if(nodoPrincipal.hasClass('entidad')){
	        		  relac=1;	        		
	        		  var tipoEnt=entidadRdfa(nodoPrincipal);
	        		  jQuery.each(data.types[tipoEnt].properties,function(o,t){	        		
	        			  if(tiposDatos.indexOf(data.properties[t].ranges[0]) != -1){
	        			  	  opciones.push({text:data.properties[t].label,onclick: function(){añadirEntidad(a,data.properties[t].ranges[0],b,data.properties[t].id);}}) 
	        			  }
	        		  })
					  break;
					}
	        	  nodoPrincipal=nodoPrincipal.parent();
	          }	    
	        if(!relac){
				var opc={};
				jQuery.each(data.types,function(o,t){
					if(t.level==1){
						opciones.push({text:t.label,onclick:function(){
							añadirEntidad(a,t.id,b,0);
						}});
					}else{
						opc[t.id]=t.label;
					}
				})
				opciones2=[];
				jQuery.each(opc,function(i,v){
					 opciones2.push({text:v,onclick:function(){
						 añadirEntidad(a,i,b,0);
					}});
				});
				opciones.push({text:'More',menu:opciones2});
	        }
	          if(opciones.length)
	        	  arrayMenu.push({text:'Añadir entidad', menu:opciones})
	          t=new tinymce.ui.Menu({items:arrayMenu,context:"contextmenu"}),t.renderTo(document.body)
	          var r={x:event.pageX,y:event.pageY};
	          a.inline||(r=tinymce.DOM.getPos(a.getContentAreaContainer()),r.x+=event.clientX,r.y+=event.clientY),t.moveTo(r.x,r.y),a.on("remove",function(){t.remove(),t=null})
		});	
				
	});    
});

function entidadRdfa(obj){
		return obj.attr('typeof').split(':')[1];	
}

function prepContenido(obj,prop){	
	if(prop){
		salida=obj.attr('property').split(':')[1];
	}else{
		var tipEnt=entidadRdfa(obj);
		var salida="<ul class='tooltip-t' style='list-style: none;text-align:left;margin:0 0 0 0;padding-left: 1em;text-indent: -1em;'>";
		if(obj.attr('property')){
			salida +="<li>"+obj.attr('property').split(':')[1]+"</li>";
		}
		salida +="<li>Type: <b>"+tipEnt+"</b></li>";
		salida +="</ul>";		
	}
	return salida;
}

// Añadir atributos Rdfa al Cogido HTML
function añadirEntidad(editor,tipoEnt,b,relac){
	var argumentoNodo = nodoSelecc.innerHTML;
	argumentoNodo = argumentoNodo.replace(/\s(data-mce-href=)".*?"/g, "");
	argumentoNodo = argumentoNodo.replace(/\s(xmlns=)".*?"/g, "");
	var palabraSelec = editor.selection.getContent();
	var nodoSelecc = editor.selection.getNode();
	if(!palabraSelec){
		alert('Selecciona una palabra');
		return null;
	}
	var variab=jQuery(palabraSelec);
	var uri='';

	if(variab.length){
		if(variab.length<1){
			editor.dom.setAttrib(nodoSelecc,"typeof",'schema:'+tipoEnt);
			if(uri){
				editor.dom.setAttrib(nodoSelecc,"resource",uri);
			}
			if(relac){
				editor.dom.setAttrib(nodoSelecc,"property",'schema:'+relac);
			}
			editor.dom.setAttrib(nodoSelecc,"class",'entidad r_'+tipoEnt.toLowerCase());
			if(cPalabras(argumentoNodo)<3)
				nodoSelecc.innerHTML="<span class='prop r_name' property='schema:name'>"+argumentoNodo+"</span>";
		}else{
			
			var temp = ' class="entidad r_'+tipoEnt.toLowerCase()+'" typeof="schema:'+tipoEnt+'"';
			if(uri){
				temp=temp+' resource="'+uri+'"';
			}
			if(relac){
				temp=temp+' property="schema:'+relac+'"';
			}
			var contenidoAnot;
			contenidoAnot = "<div" + temp + ">" + palabraSelec
			+ "</div>";
			editor.selection.setContent(contenidoAnot);
		}
	}else{
		var temp = ' class="entidad r_'+tipoEnt.toLowerCase()+'" typeof="schema:'+tipoEnt+'"';
		if(uri){
			temp=temp+' resource="'+uri+'"';
		}
		if(relac){
			temp=temp+' property="schema:'+relac+'"';
		}
		var contenidoAnot;
		if(cPalabras(palabraSelec)<3){
			contenidoAnot = "<span" + temp + "><span class='prop r_name' property='schema:name'>" + palabraSelec
			+ "</span></span>";
		}else{
			contenidoAnot = "<span" + temp + ">" + palabraSelec
			+ "</span>";
		}
		editor.selection.setContent(contenidoAnot);
		
	}
	var nombreEsp =editor.dom.get('namespaces');
	var empieza;
	var termina;		
	if(nombreEsp){
		txt=nombreEsp.innerHTML;
		empieza = "";
		termina="";
	}else{
		empieza = "<div id='namespaces' prefix='schema: http://schema.org/'>";
		termina="</div>";
	}	
	jQuery(editor.getBody()).html(empieza+jQuery(editor.getBody()).html()+termina);

editor.cambiarNodo();
}

// función que muestra las anotaciones
function mostrar(editor){
	jQuery.each(jQuery(editor.getDoc()).find('.entidad_h'), function(index, value) {
		jQuery(this).removeClass('entidad_h').addClass('entidad').removeAttr("style");		
	});		
	jQuery.each(jQuery(editor.getDoc()).find('.prop_h'), function(index, value) {
		jQuery(this).removeClass('prop_h').addClass('prop').removeAttr("style");		
	});	
	jQuery(editor.getBody()).html(jQuery(editor.getBody()).html());		
}
//función que esconde las anotaciones
function esconder(editor){	
	jQuery.each(jQuery(editor.getDoc()).find('.entidad'), function(index, value) { 
		if(jQuery.browser.webkit == true){		
			jQuery(this).css('background-color','#fff');
		}else{
			jQuery(this).css('background','none');
		}
		jQuery(this).removeClass('entidad').addClass('entidad_h');		
	});		
	jQuery.each(jQuery(editor.getDoc()).find('.prop'), function(index, value) { 
		if(jQuery.browser.webkit == true){
			jQuery(this).css('background-color','#fff');
		}else{
			jQuery(this).css('background','none');
		}
		jQuery(this).removeClass('prop').addClass('.prop_h');		
	});
}
// función que borra todas las anotaciones
function borrar(editor,auto){
	var anota="anoRdfa";
	jQuery(editor.getDoc()).find('.tooltip').remove();
	jQuery(editor.getDoc()).find('.tooltip-t').remove();
	if(auto){
		jQuery(editor.getDoc()).find('.automatic').each(function(i,v){
			borrarAnotacion(jQuery(v),anota);
		});	
	}else{
		jQuery(editor.getDoc()).find('.entidad').each(function(i,v){
			borrarAnotacion(jQuery(v),anota);
		});		
	}
		// borra los nombres
	var es=editor.dom.get('namespaces');
	if(es){
		editor.setContent(es.innerHTML);
	}
}
// función que borra cada anotación de manera individual
function borrarAnotacion(pointer,format){
		pointer.find('.tooltip').remove();
		pointer.find('.tooltip-t').remove();
		
	if(format=="RDFa"){
		pointer.css("background-color","");
		pointer.removeAttr("typeof").removeAttr("class").removeAttr("resource").removeAttr("property");
		pointer.find('>[property]').each(function(i,v){
			borrarAnotacion(jQuery(v),'RDFa')
		});
	}
	pointer.find('span').each(function(i,v){
		if(!jQuery(v)[0].attributes.length){
			jQuery(v).replaceWith(jQuery(v).html());
		}
	});
	if(pointer.is('span') && !jQuery(pointer)[0].attributes.length){
		pointer.replaceWith(pointer.html());
	}
}
//modifica contextmenu del editor
tinymce.PluginManager.add("contextmenu",function(e){var n,t=e.settings.contextmenu_never_use_native;e.on("contextmenu",function(i){var o;if(!i.ctrlKey||t){if(i.preventDefault(),o=e.settings.contextmenu ,n)n.show();else{var c=[];tinymce.each(o.split(/[ ,]/),function(n){var t=e.menuItems[n];"|"==n&&(t={text:n}),t&&(t.shortcut="",c.push(t))});}var l={x:i.pageX,y:i.pageY};e.inline||(l=tinymce.DOM.getPos(e.getContentAreaContainer()),l.x+=i.clientX,l.y+=i.clientY)}})});



